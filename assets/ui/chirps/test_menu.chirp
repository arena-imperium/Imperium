fn button(action) {
    Overlay(column layout("voCaC") rules(1.0*, 1.0*)){
        Button(button(action) highlight image("ui/textures/button.png") rules(1.0*, 1.0*) )
        Text(font("fonts/FiraSans-Bold.ttf") text("test"))
    }
}
Root(screen_root row distrib_start main_margin(50) ) {
    // Extra column to center the thing
    Column(column rules(100%, 100%)) {
        Column(column layout("vdSaS") rules(1.0*, 1.0*) main_margin(10) ) {
            TitleCard(width(1.0*) image("ui/textures/board.png"))
            // Call it like a rust macro
            button!("PrintHello")
            button!("increment_counter")
            button!("increment_counter")
            Text(label("counter") rules(300px, 50px))
            button!()
            button!()
            Text(text_box("test") rules(300px, 50px))
            Text(text_box("test1") rules(300px, 50px))
            Text(text_box("test2") rules(300px, 50px))
        }
    }
}

// note: Changing asset location doesn't work without recompiling
// Changing Root elements doesn't seem to have an affect without recompiling

// rules() = specify 2 of the following items, (x, y) on how the element should be sized:
// * = absolute ratio of original image size (or size of children-contents)
// % percentage of parent
// px fixed number of pixels

// layout(); must have one of each in this order. First is default.
// Don't use layout at all if you want to center things right in the middle
// v = vertical
// > = horiz
// -----
// "dS" = Items are clumped together at the left/top.
// "dE" = Items are distributed evenly, with no space left on the sides of the container.
// "dC" = Items are clumped together at the right/bottom.
// "oS" = Items overlap at the left/top.
// "oC" = Items overlap centered on the middle of the container.
// "oE" = Items overlap at the right/bottom.
// -----
// "aS" = The items within the container are all aligned to the top or left.
//
// If the container's axis is `Direction::Vertical`, a start alignment
// will align all items to the left.
// "aC" = The items within the container are all centered on the container's axis.
// "aE" = The items within the container are all aligned to the bottom or right.
//
// If the container's axis is `Direction::Vertical`, an end alignment
// will align all items to the right.