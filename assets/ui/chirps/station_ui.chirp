fn button(action, text) {
    Overlay(column layout("voCaC") rules(1.0*, 1.0*)){
        Button(button(action) highlight image("ui/textures/button.png") rules(1.0*, 1.0*) )

        Text(font("fonts/FiraSans-Bold.ttf") text(text))
    }
}
fn login_init() {
    ThePressAnyKeyScreen(column layout("vdEaC") rules(100%, 100%) margin(100)) {
        // Call it like a rust macro
        Text(font_size(30) font("fonts/FiraSans-Bold.ttf") text("Press any key to request station access"))
    }
}
fn login_window() {
    LoginWindow(column rules(100%, 100%) ) {
        // Extra column to center the thing
        Window(column layout("vdEaC") rules(1.0*, 1.0*) margin(20) image("ui/textures/board.png")) {
            WindowTitle(column layout("voCaC") rules(1.0*, 1.0*)) {
                StationMessage(font_size(30) font("fonts/FiraSans-Bold.ttf") text("Station Entry Id Request"))
                ToTheRight(column layout(">dEaC") rules(400px, 1.0*)) {
                    CloseButton(button("close") highlight font_size(30) font("fonts/FiraSans-Bold.ttf") text("X") )
                }
            }
            LoginButton(column layout("vdSaC") rules(1.0*, 1.0*) margin(50) image("ui/textures/board.png")) {
                button!("connect_id", "Connect ID")
            }
        }
    }
}
fn sel_sol_window() {
    SlectSolanaWindow(column rules(100%, 100%) ) {
        // Extra column to center the thing
        Window(column layout("vdEaC") rules(1.0*, 1.0*) margin(20) image("ui/textures/board.png")) {
            WindowTitle(column layout("voCaC") rules(1.0*, 1.0*)) {
                StationMessage(font_size(30) font("fonts/FiraSans-Bold.ttf") text("Select Solana Client"))
                ToTheRight(column layout(">dEaC") rules(400px, 1.0*)) {
                    CloseButton(button("close") highlight font_size(30) font("fonts/FiraSans-Bold.ttf") text("X") )
                }
            }
            LoginButton(column layout("vdSaC") rules(1.0*, 1.0*) margin(50) image("ui/textures/board.png")) {
                button!("select_default_client", "HardcodedWallet")
                button!("select_default_client", "HardCodedWallet#2")
            }
        }
    }
}
fn loading() {
    LoadingWindow(column rules(100%, 100%) ) {
        // Extra column to center the thing
        Window(column layout("vdEaC") rules(1.0*, 1.0*) margin(20) image("ui/textures/board.png")) {
            WindowTitle(column layout("voCaC") rules(1.0*, 1.0*)) {
                StationMessage(font_size(30) font("fonts/FiraSans-Bold.ttf") text("Verifying Id"))
                ToTheRight(column layout(">dEaC") rules(400px, 1.0*)) {
                    CloseButton(button("close") highlight font_size(30) font("fonts/FiraSans-Bold.ttf") text("X") )
                }
            }
            Menu(layout(">oCaC") rules(1.0*, 1.0*)) {
                Text(mark("waiting") group("loading") font_size(30) font("fonts/FiraSans-Bold.ttf") text(". . ."))
                Text(mark("no_id") group("loading") hidden font_size(30) font("fonts/FiraSans-Bold.ttf") text("No Id Found! Creating new user id..."))
            }
        }
    }
}

Root(screen_root row distrib_start main_margin(50) ) {
    Menu(layout(">oCaC") rules(100%, 100%)) {
        login_init!()(mark("init"))
        login_window!()(hidden mark("window"))
        sel_sol_window!()(hidden mark("sel_sol_window"))
        loading!()(hidden mark("loading"))
    }
}

// note: Changing asset location doesn't work without recompiling

// rules() = specify 2 of the following items, (x, y) on how the element should be sized:
// * = absolute ratio of original image size (or size of children-contents)
// % percentage of parent
// px fixed number of pixels

// layout(); must have one of each in this order. First is default.
// Don't use layout at all if you want to center things right in the middle
// v = vertical
// > = horiz
// -----
// "dS" = Items are clumped together at the left/top.
// "dE" = Items are distributed evenly, with no space left on the sides of the container.
// "dC" = Items are clumped together at the right/bottom.
// "oS" = Items overlap at the left/top.
// "oC" = Items overlap centered on the middle of the container.
// "oE" = Items overlap at the right/bottom.
// -----
// "aS" = The items within the container are all aligned to the top or left.
              ///
              /// If the container's axis is `Direction::Vertical`, a start alignment
              /// will align all items to the left.
// "aC" = The items within the container are all centered on the container's axis.
// "aE" = The items within the container are all aligned to the bottom or right.
              ///
              /// If the container's axis is `Direction::Vertical`, an end alignment
              /// will align all items to the right.